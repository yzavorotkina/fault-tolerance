services:
  rabbitmq:
    image: rabbitmq:4.0.6-management-alpine
    container_name: rabbitmq
    ports:
    - "5672:5672"
    - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_LOAD_DEFINITIONS: "true"
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q check_port_connectivity && rabbitmq-diagnostics -q cluster_status && rabbitmq-diagnostics -q check_local_alarms" ]
    networks:
    - crack_net
    volumes:
    - ./deploy/config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    - ./deploy/config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    - rabbitmq_data:/var/lib/rabbitmq
  mongo-primary:
    image: mongo:8.0.6
    container_name: mongo-primary
    command: [ "mongod", "--config", "/etc/mongodb/mongod.conf" ]
    ports:
    - "27017:27017"
    volumes:
    - mongo_primary_data:/data/db
    - ./deploy/config/mongo/mongod.conf:/etc/mongodb/mongod.conf:ro
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - crack_net
  mongo-secondary1:
    image: mongo:8.0.6
    container_name: mongo-secondary1
    command: [ "mongod", "--config", "/etc/mongodb/mongod.conf" ]
    ports:
    - "27018:27017"
    volumes:
    - mongo_secondary1_data:/data/db
    - ./deploy/config/mongo/mongod.conf:/etc/mongodb/mongod.conf:ro
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - crack_net
  mongo-secondary2:
    image: mongo:8.0.6
    container_name: mongo-secondary2
    command: [ "mongod", "--config", "/etc/mongodb/mongod.conf" ]
    ports:
    - "27019:27017"
    volumes:
    - mongo_secondary2_data:/data/db
    - ./deploy/config/mongo/mongod.conf:/etc/mongodb/mongod.conf:ro
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - crack_net
  mongo-rs-init:
    image: mongo:8.0.6
    container_name: mongo-rs-init
    depends_on:
      mongo-primary:
        condition: service_healthy
      mongo-secondary1:
        condition: service_healthy
      mongo-secondary2:
        condition: service_healthy
    volumes:
    - ./deploy/config/mongo/mongo-rs-init.sh:/scripts/mongo-rs-init.sh:ro
    entrypoint: [ "bash", "/scripts/mongo-rs-init.sh" ]
    restart: "no"
    networks:
    - crack_net
  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: mongo-express
    restart: always
    ports:
    - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo-primary:27017,mongo-secondary1:27017,mongo-secondary2:27017/?replicaSet=rs0"
    depends_on:
      mongo-primary:
        condition: service_healthy
      mongo-secondary1:
        condition: service_healthy
      mongo-secondary2:
        condition: service_healthy
    networks:
    - crack_net
  manager:
    build:
      context: ./manager
      dockerfile: dockerfile
    container_name: manager
    ports:
    - "8080:8080"
    networks:
    - crack_net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      rabbitmq:
        condition: service_healthy
  worker:
    build:
      context: ./worker
      dockerfile: dockerfile
    deploy:
      replicas: 2
    networks:
    - crack_net
    depends_on:
      rabbitmq:
        condition: service_healthy
networks:
  crack_net:
    driver: bridge
volumes:
  rabbitmq_data:

  mongo_primary_data:
  mongo_secondary1_data:
  mongo_secondary2_data: